(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.quicklink = factory());
}(this, (function () {
  var preFetched = {};
  function support(feature) {
      var link = document.createElement('link');
      return (link.relList || {}).supports && link.relList.supports(feature);
  }

  function linkPrefetchStrategy(url) {
      return new Promise(function (resolve, reject) {
          var link = document.createElement("link");
          link.rel = "prefetch";
          link.href = url;
          link.onload = resolve;
          link.onerror = reject;
          document.head.appendChild(link);
      });
  }
  function xhrPrefetchStrategy(url) {
      return new Promise(function (resolve, reject) {
          var req = new XMLHttpRequest();
          req.open("GET", url, req.withCredentials = true);
          req.onload = (function () {
              req.status === 200 ? resolve() : reject();
          });
          req.send();
      });
  }

  function highPriFetchStrategy(url) {
      return self.fetch == null ? xhrPrefetchStrategy(url) : fetch(url, {
          credentials: "include"
      });
  }

  var supportedPrefetchStrategy = support('prefetch') ? linkPrefetchStrategy : xhrPrefetchStrategy;
  function prefetcher(url, isPriority, conn) {
      if (preFetched[url]) {
          return;
      }
      if (conn = navigator.connection) {
          if ((conn.effectiveType || '').includes('2g') || conn.saveData) 
              { return; }
      }
      return (isPriority ? highPriFetchStrategy : supportedPrefetchStrategy)(url).then(function () {
          preFetched[url] = true;
      });
  }


  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZWZldGNoLm1qcyhvcmlnaW5hbCkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLEtBQUEsQ0FBTSxhQUFhO0FBUW5CLFNBQVMsUUFBUSxTQUFTO0lBQ3hCLEtBQUEsQ0FBTSxPQUFPLFFBQUEsQ0FBUyxhQUFULENBQXVCO0lBQ3BDLFFBQVEsSUFBQSxDQUFLLE9BQUwsQ0FBQSxFQUFBLENBQWdCLEdBQWpCLENBQXFCLFFBQXJCLENBQUEsRUFBQSxDQUFpQyxJQUFBLENBQUssT0FBTCxDQUFhLFFBQWIsQ0FBc0I7QUFDaEU7O0FBT0EsU0FBUyxxQkFBcUIsS0FBSztJQUNqQyxPQUFPLElBQUksT0FBSixFQUFhLE9BQVMsRUFBQSxRQUFWLEdBQXFCO1FBQ3RDLEtBQUEsQ0FBTSxPQUFPLFFBQUEsQ0FBUyxhQUFULENBQXVCLEtBQUE7UUFDcEMsSUFBQSxDQUFLLEdBQUwsQ0FBQSxDQUFBLENBQVcsU0FBQTtRQUNYLElBQUEsQ0FBSyxJQUFMLENBQUEsQ0FBQSxDQUFZO1FBRVosSUFBQSxDQUFLLE1BQUwsQ0FBQSxDQUFBLENBQWM7UUFDZCxJQUFBLENBQUssT0FBTCxDQUFBLENBQUEsQ0FBZTtRQUVmLFFBQUEsQ0FBUyxJQUFULENBQWMsV0FBZCxDQUEwQjtJQUM5QjtBQUNBOztBQUFDO0FBT0QsU0FBUyxvQkFBb0IsS0FBSztJQUNoQyxPQUFPLElBQUksT0FBSixFQUFhLE9BQVMsRUFBQSxRQUFWLEdBQXFCO1FBQ3RDLEtBQUEsQ0FBTSxNQUFNLElBQUksY0FBSjtRQUVaLEdBQUEsQ0FBSSxJQUFKLENBQVMsSUFBQSxHQUFPLEtBQUssR0FBQSxDQUFJLGVBQUosQ0FBQSxDQUFBLENBQW9CO1FBRXpDLEdBQUEsQ0FBSSxNQUFKLENBQUEsQ0FBQSxLQUFhLEdBQU07WUFDaEIsR0FBQSxDQUFJLE1BQUosQ0FBQSxHQUFBLENBQWUsR0FBaEIsR0FBdUIsT0FBQSxLQUFZLE1BQUE7UUFDekM7UUFFSSxHQUFBLENBQUksSUFBSjtJQUNKO0FBQ0E7O0FBUUEsU0FBUyxxQkFBcUIsS0FBSztJQVFqQyxPQUFPLElBQUEsQ0FBSyxLQUFMLENBQUEsRUFBQSxDQUFjLElBQWQsR0FDSCxtQkFBQSxDQUFvQixPQUNwQixLQUFBLENBQU0sS0FBSztRQUFDLGFBQWEsUUFBQTs7QUFDL0I7O0FBRUEsS0FBQSxDQUFNLDRCQUE0QixPQUFBLENBQVEsV0FBUixHQUM5Qix1QkFDQTtBQVNKLFNBQVMsV0FBVyxHQUFLLEVBQUEsVUFBWSxFQUFBLE1BQU07SUFDekMsSUFBSSxVQUFBLENBQVcsTUFBTTtRQUNuQjtJQUNKO0lBRUUsSUFBSSxJQUFBLENBQUEsQ0FBQSxDQUFPLFNBQUEsQ0FBVSxZQUFZO1FBRS9CLEtBQUssSUFBQSxDQUFLLGFBQUwsQ0FBQSxFQUFBLENBQXNCLEdBQXZCLENBQTJCLFFBQTNCLENBQW9DLEtBQXBDLENBQUEsRUFBQSxDQUE2QyxJQUFBLENBQUs7WUFBVTtJQUNwRTtJQUdFLFFBQVEsVUFBQSxHQUFhLHVCQUF1QiwwQkFBckMsQ0FBZ0UsSUFBaEUsQ0FBcUUsSUFBckUsSUFBMEUsR0FBTTtRQUNyRixVQUFBLENBQVcsSUFBWCxDQUFBLENBQUEsQ0FBa0I7SUFDdEI7QUFDQTs7QUFBQztBQUVELGVBQWU7QUFsSGYiLCJmaWxlIjoicHJlZmV0Y2gubWpzKG9yaWdpbmFsKSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9ydGlvbnMgY29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqIEluc3BpcmVkIGJ5IEdhdHNieSdzIHByZWZldGNoaW5nIGxvZ2ljLCB3aXRoIHRob3NlIHBvcnRpb25zXG4gKiByZW1haW5pbmcgTUlULiBBZGRpdGlvbnMgaW5jbHVkZSBzdXBwb3J0IGZvciBGZXRjaCBBUEksXG4gKiBYSFIgc3dpdGNoaW5nLCBTYXZlRGF0YSBhbmQgRWZmZWN0aXZlIENvbm5lY3Rpb24gVHlwZSBjaGVja2luZy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbmNvbnN0IHByZUZldGNoZWQgPSB7fTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBmZWF0dXJlIG9uIGBsaW5rYCBpcyBuYXRpdmVseSBzdXBwb3J0ZWQuXG4gKiBFeGFtcGxlcyBvZiBmZWF0dXJlcyBpbmNsdWRlIGBwcmVmZXRjaGAgYW5kIGBwcmVsb2FkYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlIC0gbmFtZSBvZiB0aGUgZmVhdHVyZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZFxuICovXG5mdW5jdGlvbiBzdXBwb3J0KGZlYXR1cmUpIHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgcmV0dXJuIChsaW5rLnJlbExpc3QgfHwge30pLnN1cHBvcnRzICYmIGxpbmsucmVsTGlzdC5zdXBwb3J0cyhmZWF0dXJlKTtcbn1cblxuLyoqXG4gKiBGZXRjaGVzIGEgZ2l2ZW4gVVJMIHVzaW5nIGA8bGluayByZWw9cHJlZmV0Y2g+YFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHRoZSBVUkwgdG8gZmV0Y2hcbiAqIEByZXR1cm4ge09iamVjdH0gYSBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGxpbmtQcmVmZXRjaFN0cmF0ZWd5KHVybCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBsaW5rYCk7XG4gICAgbGluay5yZWwgPSBgcHJlZmV0Y2hgO1xuICAgIGxpbmsuaHJlZiA9IHVybDtcblxuICAgIGxpbmsub25sb2FkID0gcmVzb2x2ZTtcbiAgICBsaW5rLm9uZXJyb3IgPSByZWplY3Q7XG5cbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xuICB9KTtcbn07XG5cbi8qKlxuICogRmV0Y2hlcyBhIGdpdmVuIFVSTCB1c2luZyBYTUxIdHRwUmVxdWVzdFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHRoZSBVUkwgdG8gZmV0Y2hcbiAqIEByZXR1cm4ge09iamVjdH0gYSBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIHhoclByZWZldGNoU3RyYXRlZ3kodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICByZXEub3BlbihgR0VUYCwgdXJsLCByZXEud2l0aENyZWRlbnRpYWxzPXRydWUpO1xuXG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIChyZXEuc3RhdHVzID09PSAyMDApID8gcmVzb2x2ZSgpIDogcmVqZWN0KCk7XG4gICAgfTtcblxuICAgIHJlcS5zZW5kKCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEZldGNoZXMgYSBnaXZlbiBVUkwgdXNpbmcgdGhlIEZldGNoIEFQSS4gRmFsbHMgYmFja1xuICogdG8gWE1MSHR0cFJlcXVlc3QgaWYgdGhlIEFQSSBpcyBub3Qgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHRoZSBVUkwgdG8gZmV0Y2hcbiAqIEByZXR1cm4ge09iamVjdH0gYSBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGhpZ2hQcmlGZXRjaFN0cmF0ZWd5KHVybCkge1xuICAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSB1c2luZyBwcmVsb2FkIGZvciBoaWdoLXByaW9yaXR5XG4gIC8vIGZldGNoZXMuIE1heSBoYXZlIHRvIHNuaWZmIGZpbGUtZXh0ZW5zaW9uIHRvIHByb3ZpZGVcbiAgLy8gdmFsaWQgJ2FzJyB2YWx1ZXMuIEluIHRoZSBmdXR1cmUsIHdlIG1heSBiZSBhYmxlIHRvXG4gIC8vIHVzZSBQcmlvcml0eSBIaW50cyBoZXJlLlxuICAvL1xuICAvLyBBcyBvZiAyMDE4LCBmZXRjaCgpIGlzIGhpZ2gtcHJpb3JpdHkgaW4gQ2hyb21lXG4gIC8vIGFuZCBtZWRpdW0tcHJpb3JpdHkgaW4gU2FmYXJpLlxuICByZXR1cm4gc2VsZi5mZXRjaCA9PSBudWxsXG4gICAgPyB4aHJQcmVmZXRjaFN0cmF0ZWd5KHVybClcbiAgICA6IGZldGNoKHVybCwge2NyZWRlbnRpYWxzOiBgaW5jbHVkZWB9KTtcbn1cblxuY29uc3Qgc3VwcG9ydGVkUHJlZmV0Y2hTdHJhdGVneSA9IHN1cHBvcnQoJ3ByZWZldGNoJylcbiAgPyBsaW5rUHJlZmV0Y2hTdHJhdGVneVxuICA6IHhoclByZWZldGNoU3RyYXRlZ3k7XG5cbi8qKlxuICogUHJlZmV0Y2ggYSBnaXZlbiBVUkwgd2l0aCBhbiBvcHRpb25hbCBwcmVmZXJyZWQgZmV0Y2ggcHJpb3JpdHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSB0aGUgVVJMIHRvIGZldGNoXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzUHJpb3JpdHkgLSBpZiBpcyBcImhpZ2hcIiBwcmlvcml0eVxuICogQHBhcmFtIHtPYmplY3R9IGNvbm4gLSBuYXZpZ2F0b3IuY29ubmVjdGlvbiAoaW50ZXJuYWwpXG4gKiBAcmV0dXJuIHtPYmplY3R9IGEgUHJvbWlzZVxuICovXG5mdW5jdGlvbiBwcmVmZXRjaGVyKHVybCwgaXNQcmlvcml0eSwgY29ubikge1xuICBpZiAocHJlRmV0Y2hlZFt1cmxdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbm4gPSBuYXZpZ2F0b3IuY29ubmVjdGlvbikge1xuICAgIC8vIERvbid0IHByZWZldGNoIGlmIHRoZSB1c2VyIGlzIG9uIDJHLiBvciBpZiBTYXZlLURhdGEgaXMgZW5hYmxlZC4uXG4gICAgaWYgKChjb25uLmVmZmVjdGl2ZVR5cGUgfHwgJycpLmluY2x1ZGVzKCcyZycpIHx8IGNvbm4uc2F2ZURhdGEpIHJldHVybjtcbiAgfVxuXG4gIC8vIFdhbm5hIGRvIHNvbWV0aGluZyBvbiBjYXRjaCgpP1xuICByZXR1cm4gKGlzUHJpb3JpdHkgPyBoaWdoUHJpRmV0Y2hTdHJhdGVneSA6IHN1cHBvcnRlZFByZWZldGNoU3RyYXRlZ3kpKHVybCkudGhlbigoKSA9PiB7XG4gICAgcHJlRmV0Y2hlZFt1cmxdID0gdHJ1ZTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcmVmZXRjaGVyO1xuIl19

  var requestIdleCallback = requestIdleCallback || function (cb) {
      var start = Date.now();
      return setTimeout(function () {
          cb({
              didTimeout: false,
              timeRemaining: function () {
                  return Math.max(0, 50 - (Date.now() - start));
              }
          });
      }, 1);
  };


  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QtaWRsZS1jYWxsYmFjay5tanMob3JpZ2luYWwpIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxLQUFBLENBQU0sc0JBQXNCLG1CQUFBLENBQUEsRUFBQSxDQUMxQixVQUFVLElBQUk7SUFDWixLQUFBLENBQU0sUUFBUSxJQUFBLENBQUssR0FBTDtJQUNkLE9BQU8sVUFBQSxDQUFXLFlBQVk7UUFDNUIsRUFBQSxDQUFHO1lBQ0QsWUFBWSxLQURYLENBQUE7WUFFRCxlQUFlLFlBQVk7Z0JBQ3pCLE9BQU8sSUFBQSxDQUFLLEdBQUwsQ0FBUyxHQUFHLEVBQUEsQ0FBQSxDQUFBLEVBQU0sSUFBQSxDQUFLLEdBQUwsRUFBQSxDQUFBLENBQUEsQ0FBYTtZQUNoRDs7SUFFQSxHQUFPO0FBQ1A7QUFFQSxlQUFlO0FBOUJmIiwiZmlsZSI6InJlcXVlc3QtaWRsZS1jYWxsYmFjay5tanMob3JpZ2luYWwpIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vLyBSSUMgYW5kIHNoaW0gZm9yIGJyb3dzZXJzIHNldFRpbWVvdXQoKSB3aXRob3V0IGl0XG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjayB8fFxuICBmdW5jdGlvbiAoY2IpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgY2Ioe1xuICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sIDEpO1xuICB9O1xuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuIl19

  var toPrefetch = new Set();
  var observer = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
          if (entry.isIntersecting) {
              var link = entry.target;
              if (toPrefetch.has(link.href)) {
                  observer.unobserve(link);
                  prefetcher$1(link.href);
              }
          }
      });
  });
  function prefetcher$1(url) {
      toPrefetch.delete(url);
      prefetcher(new URL(url, location.href).toString(), observer.priority);
  }

  function isIgnored(node, filter) {
      return Array.isArray(filter) ? filter.some(function (x) { return isIgnored(node, x); }) : (filter.test || filter).call(filter, node.href, node);
  }

  function index (options) {
      options = Object.assign({
          timeout: 2e3,
          priority: false,
          timeoutFn: requestIdleCallback,
          el: document
      }, options);
      observer.priority = options.priority;
      var allowed = options.origins || [location.hostname];
      var ignores = options.ignores || [];
      options.timeoutFn(function () {
          if (options.urls) {
              options.urls.forEach(prefetcher$1);
          } else {
              Array.from(options.el.querySelectorAll('a'), function (link) {
                  observer.observe(link);
                  if (!allowed.length || allowed.includes(link.hostname)) {
                      isIgnored(link, ignores) || toPrefetch.add(link.href);
                  }
              });
          }
      }, {
          timeout: options.timeout
      });
  }



  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4Lm1qcyhvcmlnaW5hbCkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBLE9BQU8sY0FBYztBQUNyQixPQUFPLHlCQUF5QjtBQUVoQyxLQUFBLENBQU0sYUFBYSxJQUFJLEdBQUo7QUFFbkIsS0FBQSxDQUFNLFdBQVcsSUFBSSxvQkFBSixDQUF5QixPQUFBLElBQVc7SUFDbkQsT0FBQSxDQUFRLE9BQVIsQ0FBZ0IsS0FBQSxJQUFTO1FBQ3ZCLElBQUksS0FBQSxDQUFNLGdCQUFnQjtZQUN4QixLQUFBLENBQU0sT0FBTyxLQUFBLENBQU07WUFDbkIsSUFBSSxVQUFBLENBQVcsR0FBWCxDQUFlLElBQUEsQ0FBSyxPQUFPO2dCQUM3QixRQUFBLENBQVMsU0FBVCxDQUFtQjtnQkFDbkIsVUFBQSxDQUFXLElBQUEsQ0FBSztZQUN4QjtRQUNBO0lBQ0E7QUFDQTtBQU9BLFNBQVMsV0FBVyxLQUFLO0lBQ3ZCLFVBQUEsQ0FBVyxNQUFYLENBQWtCO0lBQ2xCLFFBQUEsQ0FBUyxJQUFJLEdBQUosQ0FBUSxLQUFLLFFBQUEsQ0FBUyxLQUF0QixDQUE0QixRQUE1QixJQUF3QyxRQUFBLENBQVM7QUFDNUQ7O0FBV0EsU0FBUyxVQUFVLElBQU0sRUFBQSxRQUFRO0lBQy9CLE9BQU8sS0FBQSxDQUFNLE9BQU4sQ0FBYyxPQUFkLEdBQ0gsTUFBQSxDQUFPLElBQVAsQ0FBWSxDQUFBLElBQUssU0FBQSxDQUFVLE1BQU0sT0FDaEMsTUFBQSxDQUFPLElBQVAsQ0FBQSxFQUFBLENBQWUsT0FBaEIsQ0FBd0IsSUFBeEIsQ0FBNkIsUUFBUSxJQUFBLENBQUssTUFBTTtBQUN0RDs7QUFpQkEsZUFBZSxVQUFVLFNBQVM7SUFDaEMsT0FBQSxDQUFBLENBQUEsQ0FBVSxNQUFBLENBQU8sTUFBUCxDQUFjO1FBQ3RCLFNBQVMsR0FEYSxDQUFBO1FBRXRCLFVBQVUsS0FGWSxDQUFBO1FBR3RCLFdBQVcsbUJBSFcsQ0FBQTtRQUl0QixJQUFJO09BQ0g7SUFFSCxRQUFBLENBQVMsUUFBVCxDQUFBLENBQUEsQ0FBb0IsT0FBQSxDQUFRO0lBRTVCLEtBQUEsQ0FBTSxVQUFVLE9BQUEsQ0FBUSxPQUFSLENBQUEsRUFBQSxDQUFtQixDQUFDLFFBQUEsQ0FBUztJQUM3QyxLQUFBLENBQU0sVUFBVSxPQUFBLENBQVEsT0FBUixDQUFBLEVBQUEsQ0FBbUI7SUFFbkMsT0FBQSxDQUFRLFNBQVIsSUFBa0IsR0FBTTtRQUV0QixJQUFJLE9BQUEsQ0FBUSxNQUFNO1lBQ2hCLE9BQUEsQ0FBUSxJQUFSLENBQWEsT0FBYixDQUFxQjtRQUMzQixPQUFXO1lBRUwsS0FBQSxDQUFNLElBQU4sQ0FBVyxPQUFBLENBQVEsRUFBUixDQUFXLGdCQUFYLENBQTRCLE1BQU0sSUFBQSxJQUFRO2dCQUNuRCxRQUFBLENBQVMsT0FBVCxDQUFpQjtnQkFHakIsSUFBSSxDQUFDLE9BQUEsQ0FBUSxNQUFULENBQUEsRUFBQSxDQUFtQixPQUFBLENBQVEsUUFBUixDQUFpQixJQUFBLENBQUssV0FBVztvQkFFdEQsU0FBQSxDQUFVLE1BQU0sUUFBaEIsQ0FBQSxFQUFBLENBQTRCLFVBQUEsQ0FBVyxHQUFYLENBQWUsSUFBQSxDQUFLO2dCQUMxRDtZQUNBO1FBQ0E7SUFDQSxHQUFLO1FBQUMsU0FBUyxPQUFBLENBQVE7O0FBQ3ZCOztBQXZHQSIsImZpbGUiOiJpbmRleC5tanMob3JpZ2luYWwpIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG5pbXBvcnQgcHJlZmV0Y2ggZnJvbSAnLi9wcmVmZXRjaC5tanMnO1xuaW1wb3J0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgZnJvbSAnLi9yZXF1ZXN0LWlkbGUtY2FsbGJhY2subWpzJztcblxuY29uc3QgdG9QcmVmZXRjaCA9IG5ldyBTZXQoKTtcblxuY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICBjb25zdCBsaW5rID0gZW50cnkudGFyZ2V0O1xuICAgICAgaWYgKHRvUHJlZmV0Y2guaGFzKGxpbmsuaHJlZikpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGxpbmspO1xuICAgICAgICBwcmVmZXRjaGVyKGxpbmsuaHJlZik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuXG4vKipcbiAqIFByZWZldGNoIGEgc3VwcGxpZWQgVVJMLiBUaGlzIHdpbGwgYWxzbyByZW1vdmVcbiAqIHRoZSBVUkwgZnJvbSB0aGUgdG9QcmVmZXRjaCBTZXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gVVJMIHRvIHByZWZldGNoXG4gKi9cbmZ1bmN0aW9uIHByZWZldGNoZXIodXJsKSB7XG4gIHRvUHJlZmV0Y2guZGVsZXRlKHVybCk7XG4gIHByZWZldGNoKG5ldyBVUkwodXJsLCBsb2NhdGlvbi5ocmVmKS50b1N0cmluZygpLCBvYnNlcnZlci5wcmlvcml0eSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBhbmNob3IgdGFnIHNob3VsZCBiZSBwcmVmZXRjaGVkLlxuICogQSBmaWx0ZXIgY2FuIGJlIGEgUmVnRXhwLCBGdW5jdGlvbiwgb3IgQXJyYXkgb2YgYm90aC5cbiAqICAgLSBGdW5jdGlvbiByZWNlaXZlcyBgbm9kZS5ocmVmLCBub2RlYCBhcmd1bWVudHNcbiAqICAgLSBSZWdFeHAgcmVjZWl2ZXMgYG5vZGUuaHJlZmAgb25seSAodGhlIGZ1bGwgVVJMKVxuICogQHBhcmFtICB7RWxlbWVudH0gIG5vZGUgICAgVGhlIGFuY2hvciAoPGE+KSB0YWcuXG4gKiBAcGFyYW0gIHtNaXhlZH0gICAgZmlsdGVyICBUaGUgY3VzdG9tIGZpbHRlcihzKVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgSWYgdHJ1ZSwgdGhlbiBpdCBzaG91bGQgYmUgaWdub3JlZFxuICovXG5mdW5jdGlvbiBpc0lnbm9yZWQobm9kZSwgZmlsdGVyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGZpbHRlcilcbiAgICA/IGZpbHRlci5zb21lKHggPT4gaXNJZ25vcmVkKG5vZGUsIHgpKVxuICAgIDogKGZpbHRlci50ZXN0IHx8IGZpbHRlcikuY2FsbChmaWx0ZXIsIG5vZGUuaHJlZiwgbm9kZSk7XG59XG5cbi8qKlxuICogUHJlZmV0Y2ggYW4gYXJyYXkgb2YgVVJMcyBpZiB0aGUgdXNlcidzIGVmZmVjdGl2ZVxuICogY29ubmVjdGlvbiB0eXBlIGFuZCBkYXRhLXNhdmVyIHByZWZlcmVuY2VzIHN1Z2dlc3RzXG4gKiBpdCB3b3VsZCBiZSB1c2VmdWwuIEJ5IGRlZmF1bHQsIGxvb2tzIGF0IGluLXZpZXdwb3J0XG4gKiBsaW5rcyBmb3IgYGRvY3VtZW50YC4gQ2FuIGFsc28gd29yayBvZmYgYSBzdXBwbGllZFxuICogRE9NIGVsZW1lbnQgb3Igc3RhdGljIGFycmF5IG9mIFVSTHMuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgcXVpY2tsaW5rXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnVybHMgLSBBcnJheSBvZiBVUkxzIHRvIHByZWZldGNoIChvdmVycmlkZSlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmVsIC0gRE9NIGVsZW1lbnQgdG8gcHJlZmV0Y2ggaW4tdmlld3BvcnQgbGlua3Mgb2ZcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5wcmlvcml0eSAtIEF0dGVtcHQgaGlnaGVyIHByaW9yaXR5IGZldGNoIChsb3cgb3IgaGlnaClcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdGlvbnMub3JpZ2lucyAtIEFsbG93ZWQgb3JpZ2lucyB0byBwcmVmZXRjaCAoZW1wdHkgYWxsb3dzIGFsbClcbiAqIEBwYXJhbSB7QXJyYXl8UmVnRXhwfEZ1bmN0aW9ufSBvcHRpb25zLmlnbm9yZXMgLSBDdXN0b20gZmlsdGVyKHMpIHRoYXQgcnVuIGFmdGVyIG9yaWdpbiBjaGVja3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnRpbWVvdXQgLSBUaW1lb3V0IGFmdGVyIHdoaWNoIHByZWZldGNoaW5nIHdpbGwgb2NjdXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMudGltZW91dEZuIC0gQ3VzdG9tIHRpbWVvdXQgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHRpbWVvdXQ6IDJlMyxcbiAgICBwcmlvcml0eTogZmFsc2UsXG4gICAgdGltZW91dEZuOiByZXF1ZXN0SWRsZUNhbGxiYWNrLFxuICAgIGVsOiBkb2N1bWVudCxcbiAgfSwgb3B0aW9ucyk7XG5cbiAgb2JzZXJ2ZXIucHJpb3JpdHkgPSBvcHRpb25zLnByaW9yaXR5O1xuXG4gIGNvbnN0IGFsbG93ZWQgPSBvcHRpb25zLm9yaWdpbnMgfHwgW2xvY2F0aW9uLmhvc3RuYW1lXTtcbiAgY29uc3QgaWdub3JlcyA9IG9wdGlvbnMuaWdub3JlcyB8fCBbXTtcblxuICBvcHRpb25zLnRpbWVvdXRGbigoKSA9PiB7XG4gICAgLy8gSWYgVVJMcyBhcmUgZ2l2ZW4sIHByZWZldGNoIHRoZW0uXG4gICAgaWYgKG9wdGlvbnMudXJscykge1xuICAgICAgb3B0aW9ucy51cmxzLmZvckVhY2gocHJlZmV0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vdCwgZmluZCBhbGwgbGlua3MgYW5kIHVzZSBJbnRlcnNlY3Rpb25PYnNlcnZlci5cbiAgICAgIEFycmF5LmZyb20ob3B0aW9ucy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdhJyksIGxpbmsgPT4ge1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGxpbmspO1xuICAgICAgICAvLyBJZiB0aGUgYW5jaG9yIG1hdGNoZXMgYSBwZXJtaXR0ZWQgb3JpZ2luXG4gICAgICAgIC8vIH4+IEEgYFtdYCBvciBgdHJ1ZWAgbWVhbnMgZXZlcnl0aGluZyBpcyBhbGxvd2VkXG4gICAgICAgIGlmICghYWxsb3dlZC5sZW5ndGggfHwgYWxsb3dlZC5pbmNsdWRlcyhsaW5rLmhvc3RuYW1lKSkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZmlsdGVycywgdGhlIGxpbmsgbXVzdCBub3QgbWF0Y2ggYW55IG9mIHRoZW1cbiAgICAgICAgICBpc0lnbm9yZWQobGluaywgaWdub3JlcykgfHwgdG9QcmVmZXRjaC5hZGQobGluay5ocmVmKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7dGltZW91dDogb3B0aW9ucy50aW1lb3V0fSk7XG59XG4iXX0=

  return index;

})));
